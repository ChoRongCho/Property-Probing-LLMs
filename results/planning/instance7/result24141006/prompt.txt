--------------  --------------------------
Project Time    2024-11-29 13:41:09.019465
Task            bin_packing
Exp_Name        instance7
API JSON        setting.json
Max Predicates  1
--------------  --------------------------
--------------------------------------------------
Q: Our goal is to define the types of objects and their predicates within the dataclass Object. 
Here, we have the types, names, and properties of the objects recognized from the input images. We need to use this information to complete the Object class. 
0: name='red_3D_cuboid', predicates=['is_plastic']
1: name='yellow_3D_cuboid', predicates=['is_compressible']
2: name='blue_2D_rectangle', predicates=['is_plastic']
3: name='brown_3D_cylinder', predicates=['is_compressible']
from dataclasses import dataclass


@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj

    # physical state of an object for bin_packing
    in_bin: bool

    # Object physical properties 
    
    # Additional predicates for bin_packing (max: 1)

However, we cannot complete a planning with this dataclass predicate alone which means that we have to add other predicates that fully describe bin_packing task. 
Also you have to add predicates such as is_compressible, and is_plastic. 
Add more predicates needed for bin_packing to class Object. 

Please answer using the template below:
---template start---
Answer:
```python
# only write a code here without example instantiation
```
Reason:
# Explain in less than 200 words and why you made such predicates
---template end---


A: 
from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj

    # physical state of an object for bin_packing
    in_bin: bool

    # Object physical properties 
    is_plastic: bool
    is_compressible: bool

    # Additional predicates for bin_packing (max: 1)
    is_heavy: bool


@dataclass
class Box:
    # Basic dataclass
    index: int
    name: str

    # Predicates for box
    object_type: str  # box or obj
    in_bin_objects: list                

----------------------------------------------------------------------------------------------------

Q: Our goal is to define the pre-conditions and effects for the robot's actions, similar to how they are done in PDDL. 

from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj

    # physical state of an object for bin_packing
    in_bin: bool

    # Object physical properties 
    is_plastic: bool
    is_compressible: bool

    # Additional predicates for bin_packing (max: 1)
    is_heavy: bool


@dataclass
class Box:
    # Basic dataclass
    index: int
    name: str

    # Predicates for box
    object_type: str  # box or obj
    in_bin_objects: list                



This is the object class we should reference. 
What are the `# Object physical properties` we need to consider? Please provide an answer in 100 words. 
1. 
2. 
3. 
...

A: 
When considering the physical properties of objects for bin packing, the following properties are essential:

1. **Weight**: Determines if the object is heavy or light, affecting how it can be stacked or placed in a bin.

2. **Volume**: The size of the object, which influences how much space it occupies in a bin.

3. **Material**: Identifies if the object is plastic or another material, impacting compressibility and handling.

4. **Compressibility**: Indicates if the object can be compressed, affecting how it fits into tight spaces.

5. **Fragility**: Determines if the object is fragile, requiring careful handling and placement to avoid damage.
----------------------------------------------------------------------------------------------------

Q: This is Object class you have to use. 

from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj

    # physical state of an object for bin_packing
    in_bin: bool

    # Object physical properties 
    is_plastic: bool
    is_compressible: bool

    # Additional predicates for bin_packing (max: 1)
    is_heavy: bool


@dataclass
class Box:
    # Basic dataclass
    index: int
    name: str

    # Predicates for box
    object_type: str  # box or obj
    in_bin_objects: list                

Define the preconditions and effects of actions based on the `Object` class. Use these to create actions. 

However, if a physical property mentioned in the constraints does not exist in the Object class, ignore the constraint and do not reflect it in `def pick(self, obj, bin):`. Generate the function 'print('pick', obj.name)' without making any assumptions. 


class Action:
    def __init__(self, name: str = "UR5"):
        self.name = name    
        self.robot_handempty = True
        self.robot_now_holding = False

    # basic state
    def state_handempty(self):
        self.robot_handempty = True
        self.robot_now_holding = False

    # basic state
    def state_holding(self, obj):
        self.robot_handempty = False
        self.robot_now_holding = obj


Answer:
```python
    # only write a `def pick` here without examples and `class Action`
    def pick(self, obj, box):
        if ~~~~: 
        # Action Description: Pick an object that not in the box. The action does not include the 'place' action and can be applied to any type of object.   
        # Note! If a predicate required by the constraints is absent from the class Object, do not consider the constraints.
            print(f"pick obj.name")
            # state the effect of Action and box: self.state_holding or self.state_handempty etc if necessary
            ...effect...
            
        else:
            print(f"Cannot pick obj.name")
```


A: 
```python
    def pick(self, obj, box):
        # Preconditions: The robot's hand must be empty, and the object must not already be in the bin.
        if self.robot_handempty and not obj.in_bin:
            # Action Description: Pick an object that is not in the box.
            print(f"pick {obj.name}")
            # Effects: The robot is now holding the object, and the hand is no longer empty.
            self.state_holding(obj)
        else:
            print(f"Cannot pick {obj.name}")
```
----------------------------------------------------------------------------------------------------

Q: This is Object class you have to use. 

from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj

    # physical state of an object for bin_packing
    in_bin: bool

    # Object physical properties 
    is_plastic: bool
    is_compressible: bool

    # Additional predicates for bin_packing (max: 1)
    is_heavy: bool


@dataclass
class Box:
    # Basic dataclass
    index: int
    name: str

    # Predicates for box
    object_type: str  # box or obj
    in_bin_objects: list                

Define the preconditions and effects of actions based on the `Object` class. Use these to create actions. 
Additionally, ensure the following constraints are satisfied: 
Constraint1: Before placing a plastic object, a compressible object should be in the box before. Non-plastic objects can be placed without any constraints. 

However, if a physical property mentioned in the constraints does not exist in the Object class, ignore the constraint and do not reflect it in `def place(self, obj, bin):`. Generate the function 'print('place', obj.name)' without making any assumptions. 


class Action:
    def __init__(self, name: str = "UR5"):
        self.name = name    
        self.robot_handempty = True
        self.robot_now_holding = False

    # basic state
    def state_handempty(self):
        self.robot_handempty = True
        self.robot_now_holding = False

    # basic state
    def state_holding(self, obj):
        self.robot_handempty = False
        self.robot_now_holding = obj


Answer:
```python
    # only write a `def place` here without examples and `class Action`
    def place(self, obj, box):
        if ~~~~: 
        # Action Description: Place an object into the box. This action can be applied to any type of object.   
        # Note! If a predicate required by the constraints is absent from the class Object, do not consider the constraints.
            print(f"place obj.name")
            # state the effect of Action and box: self.state_holding or self.state_handempty etc if necessary
            ...effect...
            
        else:
            print(f"Cannot place obj.name")
```


A: 
```python
    def place(self, obj, box):
        # Action Description: Place an object into the box. This action can be applied to any type of object.
        # Check if the object is plastic and ensure a compressible object is already in the box if the constraint applies.
        if obj.is_plastic:
            compressible_in_box = any(o.is_compressible for o in box.in_bin_objects)
            if not compressible_in_box:
                print(f"Cannot place {obj.name}")
                return
        
        # Proceed with placing the object
        print(f"place {obj.name}")
        # Update the state to reflect the object is now in the box
        obj.in_bin = True
        box.in_bin_objects.append(obj)
        self.state_handempty()
```

In this function, we check if the object is plastic and ensure that a compressible object is already in the box before placing it. If the constraint is not met, the function will print that the object cannot be placed. If the conditions are satisfied, the object is placed in the box, and the state is updated to reflect that the robot's hand is empty.
----------------------------------------------------------------------------------------------------

Q: This is Object class you have to use. 

from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj

    # physical state of an object for bin_packing
    in_bin: bool

    # Object physical properties 
    is_plastic: bool
    is_compressible: bool

    # Additional predicates for bin_packing (max: 1)
    is_heavy: bool


@dataclass
class Box:
    # Basic dataclass
    index: int
    name: str

    # Predicates for box
    object_type: str  # box or obj
    in_bin_objects: list                

Define the preconditions and effects of actions based on the `Object` class. Use these to create actions. 
Constraint2: Push all compressible objects after placing them in the box. 
Constraint5: Do not bend, fold, or push a plastic object. 

However, if a physical property mentioned in the constraints does not exist in the Object class, ignore the constraint and do not reflect it in `def push(self, obj, bin):`. Generate the function 'print('push', obj.name)' without making any assumptions. 


class Action:
    def __init__(self, name: str = "UR5"):
        self.name = name    
        self.robot_handempty = True
        self.robot_now_holding = False

    # basic state
    def state_handempty(self):
        self.robot_handempty = True
        self.robot_now_holding = False

    # basic state
    def state_holding(self, obj):
        self.robot_handempty = False
        self.robot_now_holding = obj


Answer:
```python
    # only write a `def push` here without examples and `class Action`
    def push(self, obj, box):
        if ~~~~: 
        # Action Description: Push a 3D compressible object downward in the bin. Hand must remain empty before and after the pushing.   
        # Note! If a predicate required by the constraints is absent from the class Object, do not consider the constraints.
            print(f"push obj.name")
            # state the effect of Action and box: self.state_holding or self.state_handempty etc if necessary
            ...effect...
            
        else:
            print(f"Cannot push obj.name")
```


A: 
```python
    def push(self, obj, box):
        # Action Description: Push a 3D compressible object downward in the bin. 
        # Hand must remain empty before and after the pushing.
        
        # Check if the object is compressible and the robot's hand is empty
        if obj.is_compressible and self.robot_handempty:
            print(f"push {obj.name}")
            # Since the hand must remain empty, no change in holding state is needed
            self.state_handempty()
        else:
            print(f"Cannot push {obj.name}")
```
----------------------------------------------------------------------------------------------------

Q: We are now making initial state of the bin_packing. We get these information from the input images. 

{0: {'name': 'red_3D_cuboid', 'shape': '3D_cuboid', 'color': 'red', 'predicates': ['is_plastic'], 'init_pose': 'out_box'}, 1: {'name': 'yellow_3D_cuboid', 'shape': '3D_cuboid', 'color': 'yellow', 'predicates': ['is_compressible'], 'init_pose': 'out_box'}, 2: {'name': 'blue_2D_rectangle', 'shape': '2D_rectangle', 'color': 'blue', 'predicates': ['is_plastic'], 'init_pose': 'out_box'}, 3: {'name': 'brown_3D_cylinder', 'shape': '3D_cylinder', 'color': 'brown', 'predicates': ['is_compressible'], 'init_pose': 'out_box'}}
from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj

    # physical state of an object for bin_packing
    in_bin: bool

    # Object physical properties 
    is_plastic: bool
    is_compressible: bool

    # Additional predicates for bin_packing (max: 1)
    is_heavy: bool


@dataclass
class Box:
    # Basic dataclass
    index: int
    name: str

    # Predicates for box
    object_type: str  # box or obj
    in_bin_objects: list                


Using the above information, Please organize the initial state of the domain in a table. 


Please answer with the template below:
---template start---
### 1. Init Table
# fill your table using objects predicates

### 2. Python Codes
# make init state into python code
# don't include the object classes or robot class, make only objects and bin 
# example  
```python
object0 = Object(index=0, name='black_3D_cuboid', color='black', shape='3D_cuboid', ...)
object1 = Object(index=1, name='white_2D_circle', color='white', shape='2D_circle', ...)
box = Box()
```
...

### 3. Notes:
# Fill your notes
---template end---


A: 
---template start---

### 1. Init Table

| Index | Name             | Shape        | Color  | In Bin | Is Plastic | Is Compressible | Is Heavy |
|-------|------------------|--------------|--------|--------|------------|-----------------|----------|
| 0     | red_3D_cuboid    | 3D_cuboid    | red    | False  | True       | False           | False    |
| 1     | yellow_3D_cuboid | 3D_cuboid    | yellow | False  | False      | True            | False    |
| 2     | blue_2D_rectangle| 2D_rectangle | blue   | False  | True       | False           | False    |
| 3     | brown_3D_cylinder| 3D_cylinder  | brown  | False  | False      | True            | False    |

### 2. Python Codes

```python
object0 = Object(index=0, name='red_3D_cuboid', color='red', shape='3D_cuboid', object_type='obj', in_bin=False, is_plastic=True, is_compressible=False, is_heavy=False)
object1 = Object(index=1, name='yellow_3D_cuboid', color='yellow', shape='3D_cuboid', object_type='obj', in_bin=False, is_plastic=False, is_compressible=True, is_heavy=False)
object2 = Object(index=2, name='blue_2D_rectangle', color='blue', shape='2D_rectangle', object_type='obj', in_bin=False, is_plastic=True, is_compressible=False, is_heavy=False)
object3 = Object(index=3, name='brown_3D_cylinder', color='brown', shape='3D_cylinder', object_type='obj', in_bin=False, is_plastic=False, is_compressible=True, is_heavy=False)
```

### 3. Notes:

- All objects are initially out of the bin, hence `in_bin` is set to `False`.
- The `is_heavy` predicate is set to `False` for all objects as there is no information provided regarding their weight.
- The `object_type` is set to 'obj' for all objects as they are not boxes.
- The predicates `is_plastic` and `is_compressible` are set based on the provided information for each object.

---template end---
----------------------------------------------------------------------------------------------------

Q: We are currently defining the goal state for the bin_packing. Your task is to translate the goal state provided in natural language into a table. 

This is a collection of target objects for the bin_packing task. 
{0: {'name': 'red_3D_cuboid', 'shape': '3D_cuboid', 'color': 'red', 'predicates': ['is_plastic'], 'init_pose': 'out_box'}, 1: {'name': 'yellow_3D_cuboid', 'shape': '3D_cuboid', 'color': 'yellow', 'predicates': ['is_compressible'], 'init_pose': 'out_box'}, 2: {'name': 'blue_2D_rectangle', 'shape': '2D_rectangle', 'color': 'blue', 'predicates': ['is_plastic'], 'init_pose': 'out_box'}, 3: {'name': 'brown_3D_cylinder', 'shape': '3D_cylinder', 'color': 'brown', 'predicates': ['is_compressible'], 'init_pose': 'out_box'}}

Our goal is as follows: 
Pack all the objects.

Using the information, please organize the goal state of the domain into a table. 


Please answer with the template below:
---template start---
### 1. Goal Table
| Index | Name | State1 | State2 | ...
|-------|------|--------|--------|-----
|   0   |      |  True  |  False | ...
|   1   |      |  True  |  True  | ...
|   2   |      |  False |  False | ...
|  ...  |  ..  |   ..   |   ..   | ...

### 2. Notes:
# Fill your notes
---template end---


A: 
---template start---

### 1. Goal Table
| Index | Name             | Packed |
|-------|------------------|--------|
|   0   | red_3D_cuboid    |  True  |
|   1   | yellow_3D_cuboid |  True  |
|   2   | blue_2D_rectangle|  True  |
|   3   | brown_3D_cylinder|  True  |

### 2. Notes:
- The goal state for the bin_packing task is to have all objects packed, which means each object should be in the 'packed' state.
- The table reflects the goal state where all objects are marked as 'True' under the 'Packed' column, indicating they need to be packed.

---template end---
----------------------------------------------------------------------------------------------------

Q: Refer the following code containing the list of actions (class Action) and the set of initial states of objects which are defined in class Object. 

from dataclasses import dataclass

@dataclass
class Object:
    # Basic dataclass
    index: int
    name: str
    color: str
    shape: str
    object_type: str  # box or obj

    # physical state of an object for bin_packing
    in_bin: bool

    # Object physical properties 
    is_plastic: bool
    is_compressible: bool

    # Additional predicates for bin_packing (max: 1)
    is_heavy: bool


@dataclass
class Box:
    # Basic dataclass
    index: int
    name: str

    # Predicates for box
    object_type: str  # box or obj
    in_bin_objects: list                



class Action:
    def __init__(self, name: str = "UR5"):
        self.name = name    
        self.robot_handempty = True
        self.robot_now_holding = False

    # basic state
    def state_handempty(self):
        self.robot_handempty = True
        self.robot_now_holding = False

    # basic state
    def state_holding(self, obj):
        self.robot_handempty = False
        self.robot_now_holding = obj

    def pick(self, obj, box):
        # Preconditions: The robot's hand must be empty, and the object must not already be in the bin.
        if self.robot_handempty and not obj.in_bin:
            # Action Description: Pick an object that is not in the box.
            print(f"pick {obj.name}")
            # Effects: The robot is now holding the object, and the hand is no longer empty.
            self.state_holding(obj)
        else:
            print(f"Cannot pick {obj.name}")

    def place(self, obj, box):
        # Action Description: Place an object into the box. This action can be applied to any type of object.
        # Check if the object is plastic and ensure a compressible object is already in the box if the constraint applies.
        if obj.is_plastic:
            compressible_in_box = any(o.is_compressible for o in box.in_bin_objects)
            if not compressible_in_box:
                print(f"Cannot place {obj.name}")
                return
        
        # Proceed with placing the object
        print(f"place {obj.name}")
        # Update the state to reflect the object is now in the box
        obj.in_bin = True
        box.in_bin_objects.append(obj)
        self.state_handempty()

    def bend(self, obj, box):
        print('Cannot bend')

    def push(self, obj, box):
        # Action Description: Push a 3D compressible object downward in the bin. 
        # Hand must remain empty before and after the pushing.
        
        # Check if the object is compressible and the robot's hand is empty
        if obj.is_compressible and self.robot_handempty:
            print(f"push {obj.name}")
            # Since the hand must remain empty, no change in holding state is needed
            self.state_handempty()
        else:
            print(f"Cannot push {obj.name}")

    def fold(self, obj, box):
        print('Cannot fold')


object0 = Object(index=0, name='red_3D_cuboid', color='red', shape='3D_cuboid', object_type='obj', in_bin=False, is_plastic=True, is_compressible=False, is_heavy=False)
object1 = Object(index=1, name='yellow_3D_cuboid', color='yellow', shape='3D_cuboid', object_type='obj', in_bin=False, is_plastic=False, is_compressible=True, is_heavy=False)
object2 = Object(index=2, name='blue_2D_rectangle', color='blue', shape='2D_rectangle', object_type='obj', in_bin=False, is_plastic=True, is_compressible=False, is_heavy=False)
object3 = Object(index=3, name='brown_3D_cylinder', color='brown', shape='3D_cylinder', object_type='obj', in_bin=False, is_plastic=False, is_compressible=True, is_heavy=False)

And this is the table of goal states where all objects should reach. 
| Index | Name             | Packed |
|-------|------------------|--------|
|   0   | red_3D_cuboid    |  True  |
|   1   | yellow_3D_cuboid |  True  |
|   2   | blue_2D_rectangle|  True  |
|   3   | brown_3D_cylinder|  True  |

Fully understand the actions in the Action class and the initial states of all objects. Then tell me your understanding in 300 words.

A: 
The provided code defines a simple simulation of a robotic system tasked with packing objects into a box. The system is modeled using Python classes, specifically leveraging the `dataclass` decorator for defining the `Object` and `Box` classes, which simplifies the creation of classes by automatically generating special methods like `__init__()` and `__repr__()`.

The `Object` class represents items that can be manipulated by the robot. Each object has attributes such as `index`, `name`, `color`, `shape`, `object_type`, and several boolean flags indicating its state and properties, such as `in_bin`, `is_plastic`, `is_compressible`, and `is_heavy`. These attributes help define the constraints and actions applicable to each object.

The `Box` class represents the container into which objects are packed. It has an `index`, `name`, and a list `in_bin_objects` to track which objects have been placed inside.

The `Action` class models the robot's capabilities, with methods for picking, placing, pushing, bending, and folding objects. The robot's state is managed with two boolean attributes: `robot_handempty` and `robot_now_holding`. The `pick` method allows the robot to pick up an object if its hand is empty and the object is not already in the bin. The `place` method places an object into the box, with additional constraints for plastic objects, which require a compressible object to be present in the box. The `push` method allows compressible objects to be pushed into the bin without the robot holding them. The `bend` and `fold` methods are placeholders that currently do nothing.

The initial state of the objects is such that none are in the bin, and the goal is to have all objects packed. The robot must navigate constraints like ensuring compressible objects are in the box before placing certain plastic items. This setup models a simplified bin-packing problem, focusing on the sequence of actions needed to achieve the desired end state.
----------------------------------------------------------------------------------------------------

Q: Before start, you must follow the rules: 
1: Before placing a plastic object, a compressible object should be in the box before. Non-plastic objects can be placed without any constraints. 
2: Push all compressible objects after placing them in the box. 
3: If there is a bendalbe object, bend it before placing it in the box. 
4: If there is a foldable object, fold it before placing it in the box. 
5: Do not bend, fold, or push a plastic object. 

Also, we remind you the robot actions: 
pick: Pick an object that not in the box. The action does not include the 'place' action and can be applied to any type of object. 
place: Place an object into the box. This action can be applied to any type of object. 
bend: Bend a 1D bendable object. Hand must remain empty before and after the bending action. 
push: Push a 3D compressible object downward in the bin. Hand must remain empty before and after the pushing. 
fold: Fold a 2D foldable object. Hand must remain empty before and after the folding. 

        

Please answer with the template below:
---template start---

if __name__ == "__main__":
    # First, from initial state, recall the physical properties of objects and available actions:
    <Example>
    # the object1.is_rigid is True, actions pick, place are applicable
    # the object2.is_foldable is True, actions pick, place, fold are applicable
    # the object3.is_compressible is True, actions pick, place, push are applicable
    # ...
    
    <Example>
    # Rewrite the goal states of all objects given in the table in the following format.
    # object1: in_bin: True
    # object2: in_bin: False 
    # object3: in_bin: True
    # ...

    # Second, write a bin_packing order based on the given rules and the goal states of the objects.
    # !!Note1: Common Mistakes! pick -> fold -> place (x), fold -> pick -> place (o) 
    # !!Note2: Do not assume or change the physical properties of the object.
    # Write here.


    # Third, make an action sequence.
    # a) Initialize the robot and the box
    action = Action() 
    box = Box(...)

    # b) Action sequence
    

    # Fourth, after making all actions, provide your reasoning based on the given rules.
    ...

    # Finally, add this code    
    print("All task planning is done")

---template end---


A: 
```python
if __name__ == "__main__":
    # First, from initial state, recall the physical properties of objects and available actions:
    # object0: is_plastic is True, is_compressible is False, actions pick, place are applicable
    # object1: is_plastic is False, is_compressible is True, actions pick, place, push are applicable
    # object2: is_plastic is True, is_compressible is False, actions pick, place are applicable
    # object3: is_plastic is False, is_compressible is True, actions pick, place, push are applicable
    
    # Rewrite the goal states of all objects given in the table in the following format.
    # object0: in_bin: True
    # object1: in_bin: True
    # object2: in_bin: True
    # object3: in_bin: True

    # Second, write a bin_packing order based on the given rules and the goal states of the objects.
    # 1. Pick and place object1 (compressible) into the box, then push it.
    # 2. Pick and place object3 (compressible) into the box, then push it.
    # 3. Pick and place object0 (plastic) into the box.
    # 4. Pick and place object2 (plastic) into the box.

    # Third, make an action sequence.
    # a) Initialize the robot and the box
    action = Action() 
    box = Box(index=0, name='box', object_type='box', in_bin_objects=[])

    # b) Action sequence
    action.pick(object1, box)
    action.place(object1, box)
    action.push(object1, box)

    action.pick(object3, box)
    action.place(object3, box)
    action.push(object3, box)

    action.pick(object0, box)
    action.place(object0, box)

    action.pick(object2, box)
    action.place(object2, box)

    # Fourth, after making all actions, provide your reasoning based on the given rules.
    # The sequence starts by placing compressible objects (object1 and object3) into the box and pushing them,
    # ensuring that the constraint for placing plastic objects is satisfied. Plastic objects (object0 and object2)
    # are placed afterward since the compressible objects are already in the box. This sequence adheres to the rules
    # and achieves the goal state where all objects are packed.

    # Finally, add this code    
    print("All task planning is done")
```

----------------------------------------------------------------------------------------------------

