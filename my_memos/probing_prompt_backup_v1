    def load_property_probing_message_1(self):
        system_message = "You are good assistant. Don't make assumptions; just tell it like it is."
        prompt = "Describe about the object centered in the scene\n1. \n2. \n3. "

        return system_message, prompt

    def load_property_probing_message_2(self, object_name: str, action: str, property_keys: dict, before_pos=False):

        # property select code
        positive = list(property_keys[action].keys())[0]
        if action != "recover":
            negative = list(property_keys["None"].keys())[0]

        else:
            positive = before_pos
            negative = list(property_keys["recover"].keys())[0]

        prompt = (f"We will now probe the physical properties of objects bia "
                  f"the interaction between the manipulator and the objects.")

        prompt += f"We will now probe the object's properties. \n"
        prompt += f"""This defines the physical properties of object we are investigating.
{self.def_property}

In our case, we want to investigate about {positive} and {negative}. Are you ready?
"""

        return prompt

    def load_property_probing_message_3(self, object_name: str, action: str, property_keys: dict, before_pos=False) -> str:
        prompt = f"The images are images of {object_name}. Please refer to this image and answer.\n"

        # property select code
        positive = list(property_keys[action].keys())[0]
        if action != "recover":
            negative = list(property_keys["None"].keys())[0]

        else:
            positive = before_pos
            negative = list(property_keys["recover"].keys())[0]

        n = 0
        prompt += (
            f"We will show you the image when the robot does the action {action} on the object to verify the object is whether {positive} or {negative}"
            f"\nThe {int_to_ordinal(n + 1)} image is just before the robot {action} the object. \n"
            f"The {int_to_ordinal(n + 2)} image is the image when the robot is {action} the object. \n"
            f"If the object's shape has changed in the image, consider that '{positive}' occurred during {action} action."
            f"Does this object have '{positive}' or '{negative}' properties? \n\n")

        prompt += """
---template start---
1. Description of 1st image:
    -

2. Description of 2st image:
    -

3. Reasoning
    -

4. Result
    - Property: ''

---template end---
"""
        return prompt

    def load_property_recover_message(self, object_name: str, action: str, property_keys: dict, before_action=False) -> str:
        prompt = f"The images are images of {object_name}. Please refer to this image and answer.\n"

        # property select code
        if action == "recover":
            positive = list(property_keys[before_action].keys())[0]
            negative = list(property_keys["recover"].keys())[0]
        else:
            raise ValueError

        n = 0
        prompt += (
            f"We will show you the image when the robot does the action {action} on the object to verify the object is whether {positive} or {negative}"
            f"\nThe {int_to_ordinal(n + 1)} image is just before the robot {before_action} the object. \n"
            f"The {int_to_ordinal(n + 2)} image is the image when the robot is {before_action} the object. \n"
            f"The {int_to_ordinal(n + 3)} image is the image after the robot is {action} the object. \n"
            f"If the object's shape recovers from deformation in the image, consider that '{positive}' occurred during {action}."
            f"Does this object have '{positive}' or '{negative}' properties? \n\n")

        prompt += """
---template start---
1. Description of 1st image:
    -

2. Description of 2st image:
    -

3. Reasoning
    -

4. Result
    - Property: ''

---template end---
"""
        return prompt